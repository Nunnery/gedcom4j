<project name="gedcom4j" default="release">
	<property file="gedcom4j.properties" />

	<!-- Stuff for Cobertura -->
	<property name="cobertura.dir" value="lib/cobertura" />
	<path id="cobertura.classpath">
		<fileset dir="${cobertura.dir}" includes="*.jar" />
	</path>
	<taskdef resource="tasks.properties" classpathref="cobertura.classpath" />

	<!-- Stuff for Checkstyle -->
	<taskdef resource="checkstyletask.properties" classpath="lib/checkstyle-5.5-all.jar" />

	<!-- Stuff for Findbugs -->
	<property name="findbugs.home" value="lib/findbugs"/>
	<path id="findbugs.classpath">
		<fileset dir="${findbugs.home}" includes="*.jar" />
	</path>
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.classpath" />

	<target name="clean" description="Remove all build artifacts">
		<delete dir="tmp" />
		<delete dir="bin" />
		<delete dir="dist" />
		<delete dir="testbin" />
		<delete dir="target" />
		<delete dir="reports" />
		<delete>
			<fileset dir="${basedir}">
				<include name="**/cobertura.ser" />
				<include name=".swp"/>
			</fileset>
		</delete>
	</target>

	<target name="init" description="Create necessary directories for build">
		<mkdir dir="tmp" />
		<mkdir dir="bin" />
		<mkdir dir="dist" />
		<mkdir dir="testbin" />
		<mkdir dir="reports" />
	</target>

	<target name="compile" depends="init" description="Compile all source code">
		<javac srcdir="src" destdir="bin" deprecation="true" debug="true" debuglevel="lines,vars,source" source="1.5" target="1.5" includeantruntime="false" />
	</target>

	<target name="javadoc" depends="compile" description="Generate javadoc">
		<delete dir="reports/javadoc" />
		<javadoc sourcepath="src" destdir="reports/javadoc" access="private" />
	</target>

	<target name="dist" depends="javadoc" description="Build distribution jars">
		<delete dir="dist" />
		<mkdir dir="dist" />
		<copy todir="bin">
			<fileset dir="." includes="*.txt" />
		</copy>
		<jar basedir="bin" destfile="dist/gedcom4j-${release.version}.jar">
			<manifest>
				<attribute name="Source" value="http://gedcom4j.org" />
				<attribute name="Release-Version" value="${release.version}" />
			</manifest>
		</jar>
		<jar basedir="reports/javadoc" destfile="dist/gedcom4j-${release.version}-javadoc.jar">
			<manifest>
				<attribute name="Source" value="http://gedcom4j.org" />
				<attribute name="Release-Version" value="${release.version}" />
			</manifest>
		</jar>
		<jar basedir="." destfile="dist/gedcom4j-${release.version}-sources.jar">
			<include name="src/**"/>
			<include name="test/**"/>
			<manifest>
				<attribute name="Source" value="http://gedcom4j.org" />
				<attribute name="Release-Version" value="${release.version}" />
			</manifest>
		</jar>
	</target>

	<target name="release" depends="clean, dist" />

	<target name="explode-jar" depends="release" description="Convenience target for unjarring the distribution to the temp directory for inspection">
		<unjar dest="tmp" src="dist/gedcom4j-${release.version}.jar" />
	</target>


	<target name="run-tests" depends="compile" description="Run the unit tests">
		<delete dir="tmp/junit" />
		<mkdir dir="tmp/junit" />
		<delete dir="tmp/cobertura" />
		<mkdir dir="tmp/cobertura" />
		<delete dir="reports/junit" />
		<mkdir dir="reports/junit" />
		<delete dir="reports/coverage" />
		<mkdir dir="reports/coverage" />
		<javac source="1.5" target="1.5" srcdir="test" destdir="testbin" deprecation="true" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
			<classpath>
				<fileset dir="lib" includes="junit-4.10.jar" />
				<pathelement location="bin" />
			</classpath>
		</javac>
		<property name="instr.bin" value="tmp/cobertura-instrumented-bin" />
		<property name="data.file" value="${basedir}/cobertura.ser" />
		<mkdir dir="${instr.bin}" />
		<delete file="${data.file}" />
		<cobertura-instrument todir="${instr.bin}">
			<includeClasses regex="com\.mattharrah\.gedcom4j\..*" />
			<excludeClasses regex=".*\.Test.*" />
			<excludeClasses regex=".*\.Abstract.*" />
			<instrumentationClasspath>
				<path location="bin" />
			</instrumentationClasspath>
		</cobertura-instrument>
		<junit haltonfailure="false" haltonerror="false" fork="yes" forkmode="once">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${data.file}" />
			<classpath>
				<pathelement location="${instr.bin}" />
				<pathelement location="bin" />
				<pathelement location="testbin" />
				<path refid="cobertura.classpath" />
				<fileset dir="lib" includes="junit-4.10.jar" />
			</classpath>
			<batchtest todir="tmp/junit">
				<fileset dir="test">
					<include name="**/*" />
					<exclude name="**/Abstract*" />
				</fileset>
				<formatter type="plain" usefile="false" />
			</batchtest>
			<formatter type="xml" />
		</junit>
		<junitreport todir="tmp/junit">
			<fileset dir="tmp/junit">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="reports/junit" />
		</junitreport>
		<cobertura-report datafile="${data.file}" format="html" destdir="reports/coverage">
			<fileset dir="src" />
		</cobertura-report>
		<cobertura-report datafile="${data.file}" format="xml" destdir="tmp/cobertura">
			<fileset dir="src" />
		</cobertura-report>
		<delete file="${data.file}" />
	</target>


	<target name="checkstyle" description="Run Checkstyle over the source, and produce a report of violations">
		<delete dir="tmp/checkstyle" />
		<mkdir dir="tmp/checkstyle" />
		<delete dir="reports/checkstyle" />
		<mkdir dir="reports/checkstyle" />
		<checkstyle config="checkstyle-config.xml" failureProperty="checkstyle.failure" failOnViolation="false">
			<formatter type="xml" tofile="tmp/checkstyle/checkstyle_report.xml" />
			<fileset dir="src" includes="**/*.java" />
			<classpath>
				<pathelement location="bin"/>
			</classpath>
		</checkstyle>

		<xslt in="tmp/checkstyle/checkstyle_report.xml" out="reports/checkstyle/index.html" style="checkstyle-noframes-severity-sorted.xsl" />
	</target>

	<target name="findbugs" depends="compile">
		<findbugs home="${findbugs.home}" output="xml" outputFile="tmp/findbugs.xml" jvmargs="-Xmx128m">
			<sourcePath path="src" />
			<class location="bin" />
		</findbugs>
		<findbugs home="${findbugs.home}" output="html" outputFile="reports/findbugs.html" jvmargs="-Xmx128m">
			<sourcePath path="src" />
			<class location="bin" />
		</findbugs>
	</target>
</project>